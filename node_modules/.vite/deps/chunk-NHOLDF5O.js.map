{
  "version": 3,
  "sources": ["../../bootstrap-vue-next/src/composables/useAriaInvalid.ts", "../../bootstrap-vue-next/src/composables/useId.ts", "../../bootstrap-vue-next/src/utils/normalizeInput.ts", "../../bootstrap-vue-next/src/composables/useFormInput.ts", "../../bootstrap-vue-next/src/composables/useStateClass.ts", "../../bootstrap-vue-next/src/components/BFormInput/BFormInput.vue"],
  "sourcesContent": ["import type {AriaInvalid} from '../types/AriaInvalid'\nimport {computed, type MaybeRefOrGetter, toValue} from 'vue'\n\nexport const useAriaInvalid = (\n  ariaInvalid: MaybeRefOrGetter<AriaInvalid | undefined>,\n  state: MaybeRefOrGetter<boolean | null | undefined>\n) =>\n  computed(() => {\n    const resolvedAriaInvalid = toValue(ariaInvalid)\n    const resolvedState = toValue(state)\n\n    const resolvedAriaInvalidValue =\n      resolvedAriaInvalid === true\n        ? 'true'\n        : typeof resolvedAriaInvalid === 'string'\n          ? resolvedAriaInvalid\n          : resolvedState === false\n            ? 'true'\n            : resolvedAriaInvalid === false\n              ? 'false'\n              : undefined\n\n    return resolvedAriaInvalidValue\n  })\n", "import {computed, type ComputedRef, type MaybeRefOrGetter, toValue, useId as vueUseId} from 'vue'\nimport {withBvnPrefix} from '../utils/withBvnPrefix'\n\nexport const useId = (\n  id?: MaybeRefOrGetter<string | undefined>,\n  suffix?: string\n): ComputedRef<string> => {\n  const genId = vueUseId()\n  return computed(() => toValue(id) || withBvnPrefix(genId || '', suffix))\n}\n", "import type {Numberish} from '../types/CommonTypes'\n\nexport const normalizeInput = (\n  v: Numberish | null,\n  modelModifiers: Record<'number' | 'lazy' | 'trim', true | undefined>\n) => {\n  if (v === null) return\n  let update = v\n  if (modelModifiers.number && typeof update === 'string' && update !== '') {\n    const parsed = Number.parseFloat(update)\n    update = Number.isNaN(parsed) ? update : parsed\n  }\n  return update\n}\n", "import type {Numberish} from '../types/CommonTypes'\nimport {nextTick, onActivated, onMounted, ref, type Ref} from 'vue'\nimport {useAriaInvalid} from './useAriaInvalid'\nimport {useId} from './useId'\nimport {useDebounceFn, useFocus, useToNumber} from '@vueuse/core'\nimport type {CommonInputProps} from '../types/FormCommonInputProps'\n\nexport const useFormInput = (\n  props: Readonly<CommonInputProps>,\n  modelValue: Ref<Numberish | null>,\n  modelModifiers: Record<'number' | 'lazy' | 'trim', true | undefined>\n) => {\n  const input = ref<HTMLInputElement | null>(null)\n  const forceUpdateKey = ref(0)\n\n  const computedId = useId(() => props.id, 'input')\n  const debounceNumber = useToNumber(() => props.debounce ?? 0)\n  const debounceMaxWaitNumber = useToNumber(() => props.debounceMaxWait ?? NaN)\n\n  const internalUpdateModelValue = useDebounceFn(\n    (value: Numberish) => {\n      modelValue.value = value\n    },\n    () => (modelModifiers.lazy === true ? 0 : debounceNumber.value),\n    {maxWait: () => (modelModifiers.lazy === true ? NaN : debounceMaxWaitNumber.value)}\n  )\n\n  const updateModelValue = (value: Numberish, force = false) => {\n    if (modelModifiers.lazy === true && force === false) return\n    internalUpdateModelValue(value)\n  }\n\n  const {focused} = useFocus(input, {\n    initialValue: props.autofocus,\n  })\n\n  const _formatValue = (value: string, evt: Readonly<Event>, force = false) => {\n    if (props.formatter !== undefined && (!props.lazyFormatter || force)) {\n      return props.formatter(value, evt)\n    }\n    return value\n  }\n  onMounted(() => {\n    if (input.value) {\n      input.value.value = modelValue.value?.toString() ?? ''\n    }\n  })\n\n  onActivated(() => {\n    nextTick(() => {\n      if (props.autofocus) {\n        focused.value = true\n      }\n    })\n  })\n\n  const computedAriaInvalid = useAriaInvalid(\n    () => props.ariaInvalid,\n    () => props.state\n  )\n\n  const onInput = (evt: Readonly<Event>) => {\n    const {value} = evt.target as HTMLInputElement\n    const formattedValue = _formatValue(value, evt)\n    if (evt.defaultPrevented) {\n      evt.preventDefault()\n      return\n    }\n\n    const nextModel = formattedValue\n\n    updateModelValue(nextModel)\n  }\n\n  const onChange = (evt: Readonly<Event>) => {\n    const {value} = evt.target as HTMLInputElement\n    const formattedValue = _formatValue(value, evt)\n    if (evt.defaultPrevented) {\n      evt.preventDefault()\n      return\n    }\n\n    const nextModel = formattedValue\n    if (modelValue.value !== nextModel) {\n      updateModelValue(formattedValue, true)\n    }\n  }\n\n  const onBlur = (evt: Readonly<FocusEvent>) => {\n    if (!modelModifiers.lazy && !props.lazyFormatter && !modelModifiers.trim) return\n\n    const {value} = evt.target as HTMLInputElement\n    const formattedValue = _formatValue(value, evt, true)\n\n    const nextModel = modelModifiers.trim ? formattedValue.trim() : formattedValue\n    const needsForceUpdate = nextModel.length !== formattedValue.length\n    if (modelValue.value !== nextModel) {\n      updateModelValue(formattedValue, true)\n    }\n    if (modelModifiers.trim && needsForceUpdate) {\n      // The value is trimmed but there would still exist some white space\n      // So, force update the value. You need to bind this to :key on the input element\n      forceUpdateKey.value = forceUpdateKey.value + 1\n    }\n  }\n\n  const focus = () => {\n    if (!props.disabled) {\n      focused.value = true\n    }\n  }\n\n  const blur = () => {\n    if (!props.disabled) {\n      focused.value = false\n    }\n  }\n\n  return {\n    input,\n    computedId,\n    computedAriaInvalid,\n    onInput,\n    onChange,\n    onBlur,\n    focus,\n    blur,\n    forceUpdateKey,\n  }\n}\n", "import {computed, type MaybeRefOrGetter, toValue} from 'vue'\n\nexport const useStateClass = (value: MaybeRefOrGetter<boolean | null>) =>\n  computed(() => {\n    const resolvedValue = toValue(value)\n\n    return resolvedValue === true ? 'is-valid' : resolvedValue === false ? 'is-invalid' : null\n  })\n", "<template>\n  <input\n    :id=\"computedId\"\n    ref=\"input\"\n    :key=\"forceUpdateKey\"\n    :value=\"modelValue\"\n    :class=\"computedClasses\"\n    :name=\"props.name || undefined\"\n    :form=\"props.form || undefined\"\n    :type=\"props.type\"\n    :disabled=\"props.disabled\"\n    :placeholder=\"props.placeholder\"\n    :required=\"props.required || undefined\"\n    :autocomplete=\"props.autocomplete || undefined\"\n    :readonly=\"props.readonly || props.plaintext\"\n    :min=\"props.min\"\n    :max=\"props.max\"\n    :step=\"props.step\"\n    :list=\"props.type !== 'password' ? props.list : undefined\"\n    :aria-required=\"props.required || undefined\"\n    :aria-invalid=\"computedAriaInvalid\"\n    @input=\"onInput\"\n    @change=\"onChange\"\n    @blur=\"onBlur\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport {computed} from 'vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {normalizeInput} from '../../utils/normalizeInput'\nimport type {BFormInputProps} from '../../types/ComponentProps'\nimport {useFormInput} from '../../composables/useFormInput'\nimport {useStateClass} from '../../composables/useStateClass'\n\nconst _props = withDefaults(defineProps<Omit<BFormInputProps, 'modelValue'>>(), {\n  max: undefined,\n  min: undefined,\n  step: undefined,\n  type: 'text',\n  // CommonInputProps\n  ariaInvalid: undefined,\n  autocomplete: undefined,\n  autofocus: false,\n  debounce: 0,\n  debounceMaxWait: NaN,\n  disabled: false,\n  form: undefined,\n  formatter: undefined,\n  id: undefined,\n  lazyFormatter: false,\n  list: undefined,\n  modelValue: '',\n  name: undefined,\n  placeholder: undefined,\n  plaintext: false,\n  readonly: false,\n  required: false,\n  size: undefined,\n  state: null,\n  // End CommonInputProps\n})\nconst props = useDefaults(_props, 'BFormInput')\n\nconst [modelValue, modelModifiers] = defineModel<\n  Exclude<BFormInputProps['modelValue'], undefined>,\n  'trim' | 'lazy' | 'number'\n>({\n  default: '',\n  set: (v) => normalizeInput(v, modelModifiers),\n})\n\nconst {\n  input,\n  computedId,\n  computedAriaInvalid,\n  onInput,\n  onChange,\n  onBlur,\n  focus,\n  blur,\n  forceUpdateKey,\n} = useFormInput(props, modelValue, modelModifiers)\n\nconst stateClass = useStateClass(() => props.state)\n\nconst computedClasses = computed(() => {\n  const isRange = props.type === 'range'\n  const isColor = props.type === 'color'\n  return [\n    stateClass.value,\n    {\n      'form-range': isRange,\n      'form-control': isColor || (!props.plaintext && !isRange),\n      'form-control-color': isColor,\n      'form-control-plaintext': props.plaintext && !isRange && !isColor,\n      [`form-control-${props.size}`]: !!props.size,\n    },\n  ]\n})\n\ndefineExpose({\n  blur,\n  element: input,\n  focus,\n})\n</script>\n"],
  "mappings": "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",
  "names": ["useId", "vueUseId", "useId", "_useModel"]
}
